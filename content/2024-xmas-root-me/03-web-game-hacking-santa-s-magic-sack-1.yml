view: writeup
language: en
seo:
  title: XMAS root-me challenges, Generous Santa
  description:
  keywords: ctf, security, root-me, xmas, web, web game, generous santa, write-up
  author: Antoine Benevaut
  twitter: "@abenevaut"
  og-image: https://www.abenevaut.dev/images/abenevaut-og-sec.webp
  url: https://www.abenevaut.dev/2024-xmas-root-me/03-web-game-hacking-santa-s-magic-sack-1.html

writeup: |+
  # Write-up Santa's Magic Sack
  
  3 d√©cembre 2024, XMAS üéÖ root-me d√©marre avec une √©preuve web "Santa's Magic Sack", on attaque!
  
  > Santa has developed a web game where you have to catch presents, and as luck would have it, he's come out on top of the scoreboard. Can you beat him?
  
  Rendez-vous sur [l'√©preuve](https://day3.challenges.xmas.root-me.org)
  
  Long story short, la page d'accueil nous demande de renseigner un speudo et nous donne quelques instructions sur le jeu auquel on va jouer.
  Le jeu lui-m√™me est un classique, on d√©place une hotte et on essaie de r√©cup√©rer des cadeaux qui tombent du ciel.
  Il faut en r√©cup√©rer le plus possible pour gagner et cela sur 20secondes. √Ä chaque cadeau r√©cup√©r√©, on gagne des points.
  Une fois le temps √©coul√©, on voit notre score, un message qui nous indique notre score puis on voit la scoreboard. Et on recommence...
  
  Le but est de faire le meilleur score et franchement vu le rythme du jeux pour battre le premier √† 133337, faut s'accrocher.
  
  On essaie de faire le malin, que se passe-t-il si on r√©duit la largeur de la fen√™tre ? On double √† peu pr√®s notre score mais ce n'est pas suffisant.
  
  Qu'est-ce qu'il y a sous le capot? On ouvre les outils de d√©veloppement et on regarde les requ√™tes qui sont faites.
  On voit une requ√™te POST qui est faite √† la fin du jeu vers le endpoint `/api/scores`, on regarde les param√®tres envoy√©s et on voit un param√®tre `data` qui est envoy√©.
  `data` contient une string encod√© en base64, on la d√©code et on voit un objet s√©rialis√©, il doit contenir notre score, c'est s√ªr!
  
  ![](images/ctf-2024-rootme-xmas/web-game-hacking-santa-s-magic-sack-1-intercept_first_post.png)
  
  √Ä ce moment l√† de mon investigation, j'ai perdu un peu de temps √† vouloir d√©s√©rialiser l'objet, et je me suis rendu compte que c'√©tait inutile.
  
  Quand on fouille un peu les sources du site via la console web, on y trouve un seul fichier javascript `index-<HASH>.js`.
  On porte nos recherche sur le endpoint `/api/scores` et on trouve, localis√© proche les unes des autres, des fonctions qui portent sur l'envoie de la requ√™te POST et sur l'encodage notre objet.
  
  On aura m√™me du mal √† passer √† c√¥t√© de la constante `S4NT4_S3CR3T_K3Y_T0_ENCRYPT_DATA` qui est certainement la clef de chiffrement utilis√©e.
  
  ```javascript
  var Md = hf.exports;
  const gf = Rf(Md)
  , Ud = "S4NT4_S3CR3T_K3Y_T0_ENCRYPT_DATA";
  function Wd(e) {
    const t = JSON.stringify(e);
    return gf.AES.encrypt(t, Ud).toString()
  }
    function $d(e, t) {
    const r = Math.floor(Math.random() * 9) + 1
    , n = `${e}-${t}-${r}`;
    return {
  checksum: gf.SHA256(n).toString(),
  salt: r
  }
  }
    async function Vd(e, t) {
  const {checksum: r, salt: n} = $d(e, t)
                     , l = Wd({
                     playerName: e,
                     score: t,
                     checksum: r,
                     salt: n
  });
    try {
    return await (await fetch("/api/scores", {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    data: l
  })
  })).json()
  } catch (i) {
    return console.error("Error submitting score:", i),
    {
      success: !1
    }
  }
  }
  ```
  
  Je prends deux/trois minutes pour souffler dans un sac en papier pour √©vacuer la frustration de devoir faire du reverse engineering sur un jeu de No√´l, et on reprend.
  
  Ou est-ce que je peux intercepter le score avant qu'il soit encod√©, envoy√© et utilis√© par le backend ?
  
  On poursuit l'analyse des sources et on finit par trouver ce bout de code:
  
  ```javascript
    const f = async () => {
      p.current = !0,
      h.current && cancelAnimationFrame(h.current);
      const v = s.current;
      m(!0);
      try {
        const C = await Vd(e, v);
        C.isNewRecord && C.flag && y(C.flag)
      } catch (C) {
        console.error("Error submitting score:", C)
      }
      setTimeout( () => {
      m(!1),
      t(v)
    }
    , 5e3)
  };
  ```
  
  Si on poursuit l'analyse, on voit que la fonction `Vd` finit par aller jusque l'encodage du score.
  `Vd(e, v)` prend deux param√®tres et la variable `v` est initialis√©e juste au dessus, qu'y a-t-il dedans ?
  
  üéÖHohoho! On trouve la m√™me valeur que notre score!
  
  On va pouvoir tenter de poser un breakpoint et de change la valeur `s.current`.
  
  ![](images/ctf-2024-rootme-xmas/web-game-hacking-santa-s-magic-sack-1-change_value.png)
  
  On relance l'application avec notre score modifi√©, et c'est flag√©!
  
  Le flag est un peu chiant √† copier/coller via la modal qui s'ouvre, il est possible de le r√©cup√©rer via la tabulation "Elements" ou "R√©seau" de la console web.
  
  Si comme moi, vous n'avez pas beaucoup exp√©rimentez [Burp Suite](https://portswigger.net/burp), recommenc√© l'√©preuve et intercept√© la requ√™te POST pour r√©cup√©rer le flag. 
  
  ![](images/ctf-2024-rootme-xmas/web-game-hacking-santa-s-magic-sack-1-flag.png)

  Cr√©dits du challenge [root-me.org](https://x.com/rootme_org/status/1863902222846669194) et son auteur [Elweth](https://x.com/Elweth_)

  [Sommaire >](2024-xmas-root-me.html) - [Challenge suivant >](2024-xmas-root-me/04-misc-build-and-drustroy-1.html)
